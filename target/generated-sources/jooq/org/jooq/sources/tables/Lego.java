/*
 * This file is generated by jOOQ.
 */
package org.jooq.sources.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.sources.Public;
import org.jooq.sources.tables.records.LegoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lego extends TableImpl<LegoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lego</code>
     */
    public static final Lego LEGO = new Lego();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LegoRecord> getRecordType() {
        return LegoRecord.class;
    }

    /**
     * The column <code>public.lego.filter</code>.
     */
    public final TableField<LegoRecord, String> FILTER = createField(DSL.name("filter"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lego.transform</code>.
     */
    public final TableField<LegoRecord, String> TRANSFORM = createField(DSL.name("transform"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lego.deduplication</code>.
     */
    public final TableField<LegoRecord, String> DEDUPLICATION = createField(DSL.name("deduplication"), SQLDataType.CLOB, this, "");

    private Lego(Name alias, Table<LegoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lego(Name alias, Table<LegoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lego</code> table reference
     */
    public Lego(String alias) {
        this(DSL.name(alias), LEGO);
    }

    /**
     * Create an aliased <code>public.lego</code> table reference
     */
    public Lego(Name alias) {
        this(alias, LEGO);
    }

    /**
     * Create a <code>public.lego</code> table reference
     */
    public Lego() {
        this(DSL.name("lego"), null);
    }

    public <O extends Record> Lego(Table<O> child, ForeignKey<O, LegoRecord> key) {
        super(child, key, LEGO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Lego as(String alias) {
        return new Lego(DSL.name(alias), this);
    }

    @Override
    public Lego as(Name alias) {
        return new Lego(alias, this);
    }

    @Override
    public Lego as(Table<?> alias) {
        return new Lego(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lego rename(String name) {
        return new Lego(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lego rename(Name name) {
        return new Lego(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lego rename(Table<?> name) {
        return new Lego(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
