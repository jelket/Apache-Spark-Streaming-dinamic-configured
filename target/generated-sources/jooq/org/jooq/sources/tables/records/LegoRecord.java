/*
 * This file is generated by jOOQ.
 */
package org.jooq.sources.tables.records;


import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;
import org.jooq.sources.tables.Lego;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LegoRecord extends TableRecordImpl<LegoRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.lego.filter</code>.
     */
    public void setFilter(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.lego.filter</code>.
     */
    public String getFilter() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.lego.transform</code>.
     */
    public void setTransform(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.lego.transform</code>.
     */
    public String getTransform() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.lego.deduplication</code>.
     */
    public void setDeduplication(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.lego.deduplication</code>.
     */
    public String getDeduplication() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Lego.LEGO.FILTER;
    }

    @Override
    public Field<String> field2() {
        return Lego.LEGO.TRANSFORM;
    }

    @Override
    public Field<String> field3() {
        return Lego.LEGO.DEDUPLICATION;
    }

    @Override
    public String component1() {
        return getFilter();
    }

    @Override
    public String component2() {
        return getTransform();
    }

    @Override
    public String component3() {
        return getDeduplication();
    }

    @Override
    public String value1() {
        return getFilter();
    }

    @Override
    public String value2() {
        return getTransform();
    }

    @Override
    public String value3() {
        return getDeduplication();
    }

    @Override
    public LegoRecord value1(String value) {
        setFilter(value);
        return this;
    }

    @Override
    public LegoRecord value2(String value) {
        setTransform(value);
        return this;
    }

    @Override
    public LegoRecord value3(String value) {
        setDeduplication(value);
        return this;
    }

    @Override
    public LegoRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LegoRecord
     */
    public LegoRecord() {
        super(Lego.LEGO);
    }

    /**
     * Create a detached, initialised LegoRecord
     */
    public LegoRecord(String filter, String transform, String deduplication) {
        super(Lego.LEGO);

        setFilter(filter);
        setTransform(transform);
        setDeduplication(deduplication);
    }
}
